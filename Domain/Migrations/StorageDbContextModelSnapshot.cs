// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(StorageDbContext))]
    partial class StorageDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LocationId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("23c0a21d-a683-45d4-9be9-9505103a777b"),
                            Latitude = 44.78444587104417,
                            Longitude = 20.506561997595561,
                            UserId = new Guid("6c6db130-2568-4da5-88cb-52ad59cfaf24")
                        },
                        new
                        {
                            LocationId = new Guid("edfa095a-71b1-4738-ac84-6edaaa58645c"),
                            Latitude = 44.784772702099389,
                            Longitude = 20.403211196282172,
                            UserId = new Guid("e5b517e2-cec4-4573-9dd6-66d665975a29")
                        },
                        new
                        {
                            LocationId = new Guid("4ad92814-a4a7-4627-ba6a-b1bae33ae75e"),
                            Latitude = 44.75021714887216,
                            Longitude = 20.365379724076913,
                            UserId = new Guid("d0f03af2-99db-48b3-8295-9dce0dcb4cfe")
                        },
                        new
                        {
                            LocationId = new Guid("b5ddcb10-ab00-4798-ae73-698412ca9f02"),
                            Latitude = 44.777684928395495,
                            Longitude = 20.506324566143647,
                            UserId = new Guid("f336fa9d-d49e-44ac-b4e6-6a09e2563ffa")
                        },
                        new
                        {
                            LocationId = new Guid("8016c5d0-4c85-4d3e-95f0-0725a99c8a97"),
                            Latitude = 44.753557166940759,
                            Longitude = 20.36085886165025,
                            UserId = new Guid("4eac8fd1-4d66-4406-86a2-617cdbe08b73")
                        },
                        new
                        {
                            LocationId = new Guid("be9af966-cbd3-4797-b491-2717e6b42586"),
                            Latitude = 44.755114648822023,
                            Longitude = 20.538514183711797,
                            UserId = new Guid("1b19ced6-b101-4f07-b016-fa02d4a42045")
                        },
                        new
                        {
                            LocationId = new Guid("360b760f-3a13-44f5-be23-0b97641951f2"),
                            Latitude = 44.79368531746654,
                            Longitude = 20.376486430682306,
                            UserId = new Guid("800db62f-3ebf-4c7f-86b5-5de52bd60e2e")
                        },
                        new
                        {
                            LocationId = new Guid("d376ad1d-6dd5-41ce-ab5b-9377aad2ee96"),
                            Latitude = 44.745673663194601,
                            Longitude = 20.551324516628437,
                            UserId = new Guid("f9e22a9d-63c9-43e8-b765-cbd5b56a76ee")
                        },
                        new
                        {
                            LocationId = new Guid("6dc1428a-819e-45b5-8d49-c48c871dd071"),
                            Latitude = 44.737240335169169,
                            Longitude = 20.383850853276368,
                            UserId = new Guid("05dfe9a3-74ee-4690-ac0d-5a47790dacb1")
                        },
                        new
                        {
                            LocationId = new Guid("8bc4cd4e-9dcf-4ea3-970f-924365233ddd"),
                            Latitude = 44.747220636479334,
                            Longitude = 20.544206815861532,
                            UserId = new Guid("dbc86c9d-de55-4335-9d7c-eb5a4d4bbab4")
                        },
                        new
                        {
                            LocationId = new Guid("7f88bc82-33cd-466b-995c-9802e45a3bb2"),
                            Latitude = 44.823107921135147,
                            Longitude = 20.365084575526154,
                            UserId = new Guid("25b387db-7278-4053-882a-460a279cfb89")
                        },
                        new
                        {
                            LocationId = new Guid("0ccd995c-0f19-44b0-a576-89bdbed0f0a7"),
                            Latitude = 44.775315751918335,
                            Longitude = 20.382189476462727,
                            UserId = new Guid("01edcb56-91d2-4cc8-9d01-77c65dbcfe8a")
                        },
                        new
                        {
                            LocationId = new Guid("51e4cf40-96ec-4de0-b21a-131099dc6e52"),
                            Latitude = 44.770011237020277,
                            Longitude = 20.545955878670078,
                            UserId = new Guid("df1dcc6e-7fef-4a78-915d-d1477478885c")
                        },
                        new
                        {
                            LocationId = new Guid("25e3e6cb-862e-4f6d-9304-ff7c44640876"),
                            Latitude = 44.756345702820468,
                            Longitude = 20.364252110647563,
                            UserId = new Guid("43d8c1c3-1340-4d66-95bb-b17593524b5f")
                        },
                        new
                        {
                            LocationId = new Guid("85213472-5370-4d02-823b-c10ec69fcdbd"),
                            Latitude = 44.771322161189005,
                            Longitude = 20.498980019133477,
                            UserId = new Guid("7592f215-8502-4bb0-9098-2b96a0acf651")
                        },
                        new
                        {
                            LocationId = new Guid("87dea081-a3d8-4e6c-aa0b-d53dbf479c54"),
                            Latitude = 44.752930576823481,
                            Longitude = 20.499037205848172,
                            UserId = new Guid("64766971-8bba-4681-a70c-fd09e1ddbe65")
                        },
                        new
                        {
                            LocationId = new Guid("5cca7453-dcbc-4624-a4d2-1fa3c90b55dd"),
                            Latitude = 44.743172768617661,
                            Longitude = 20.468367697141574,
                            UserId = new Guid("4fae1fe1-f12c-4f63-81a7-9ab5972dbf4b")
                        },
                        new
                        {
                            LocationId = new Guid("5d2dfd64-c5a6-4428-a678-439e9d7f377e"),
                            Latitude = 44.768465745843308,
                            Longitude = 20.537194751916221,
                            UserId = new Guid("d2d2331f-1833-474a-a83f-aa43fecbc774")
                        },
                        new
                        {
                            LocationId = new Guid("7c1c9bfd-a4cf-4e02-9fda-5b4d5348b9fc"),
                            Latitude = 44.769137780494837,
                            Longitude = 20.487320611314438,
                            UserId = new Guid("d582205b-c469-46d9-a7aa-ae576072b924")
                        },
                        new
                        {
                            LocationId = new Guid("8caa5e1c-ce9d-4c34-b1a9-882bea49f3e9"),
                            Latitude = 44.797505877434951,
                            Longitude = 20.521308321551484,
                            UserId = new Guid("cda85adb-13b3-49e5-b4f8-f559d758af13")
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("6c6db130-2568-4da5-88cb-52ad59cfaf24"),
                            Email = "user1@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 2080427802,
                            UserName = "User1"
                        },
                        new
                        {
                            UserId = new Guid("e5b517e2-cec4-4573-9dd6-66d665975a29"),
                            Email = "user2@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 341851734,
                            UserName = "User2"
                        },
                        new
                        {
                            UserId = new Guid("d0f03af2-99db-48b3-8295-9dce0dcb4cfe"),
                            Email = "user3@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1431988776,
                            UserName = "User3"
                        },
                        new
                        {
                            UserId = new Guid("f336fa9d-d49e-44ac-b4e6-6a09e2563ffa"),
                            Email = "user4@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1938005744,
                            UserName = "User4"
                        },
                        new
                        {
                            UserId = new Guid("4eac8fd1-4d66-4406-86a2-617cdbe08b73"),
                            Email = "user5@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 761513014,
                            UserName = "User5"
                        },
                        new
                        {
                            UserId = new Guid("1b19ced6-b101-4f07-b016-fa02d4a42045"),
                            Email = "user6@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 2037243568,
                            UserName = "User6"
                        },
                        new
                        {
                            UserId = new Guid("800db62f-3ebf-4c7f-86b5-5de52bd60e2e"),
                            Email = "user7@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1528357293,
                            UserName = "User7"
                        },
                        new
                        {
                            UserId = new Guid("f9e22a9d-63c9-43e8-b765-cbd5b56a76ee"),
                            Email = "user8@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1311292502,
                            UserName = "User8"
                        },
                        new
                        {
                            UserId = new Guid("05dfe9a3-74ee-4690-ac0d-5a47790dacb1"),
                            Email = "user9@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 749943798,
                            UserName = "User9"
                        },
                        new
                        {
                            UserId = new Guid("dbc86c9d-de55-4335-9d7c-eb5a4d4bbab4"),
                            Email = "user10@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 319576108,
                            UserName = "User10"
                        },
                        new
                        {
                            UserId = new Guid("25b387db-7278-4053-882a-460a279cfb89"),
                            Email = "user11@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 2072233842,
                            UserName = "User11"
                        },
                        new
                        {
                            UserId = new Guid("01edcb56-91d2-4cc8-9d01-77c65dbcfe8a"),
                            Email = "user12@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1156976611,
                            UserName = "User12"
                        },
                        new
                        {
                            UserId = new Guid("df1dcc6e-7fef-4a78-915d-d1477478885c"),
                            Email = "user13@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 811244070,
                            UserName = "User13"
                        },
                        new
                        {
                            UserId = new Guid("43d8c1c3-1340-4d66-95bb-b17593524b5f"),
                            Email = "user14@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1063087737,
                            UserName = "User14"
                        },
                        new
                        {
                            UserId = new Guid("7592f215-8502-4bb0-9098-2b96a0acf651"),
                            Email = "user15@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 2103111965,
                            UserName = "User15"
                        },
                        new
                        {
                            UserId = new Guid("64766971-8bba-4681-a70c-fd09e1ddbe65"),
                            Email = "user16@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1036067702,
                            UserName = "User16"
                        },
                        new
                        {
                            UserId = new Guid("4fae1fe1-f12c-4f63-81a7-9ab5972dbf4b"),
                            Email = "user17@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 1929035529,
                            UserName = "User17"
                        },
                        new
                        {
                            UserId = new Guid("d2d2331f-1833-474a-a83f-aa43fecbc774"),
                            Email = "user18@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 2137347066,
                            UserName = "User18"
                        },
                        new
                        {
                            UserId = new Guid("d582205b-c469-46d9-a7aa-ae576072b924"),
                            Email = "user19@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 825105703,
                            UserName = "User19"
                        },
                        new
                        {
                            UserId = new Guid("cda85adb-13b3-49e5-b4f8-f559d758af13"),
                            Email = "user20@example.com",
                            PasswordHash = "hashedPassword",
                            Points = 75333798,
                            UserName = "User20"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Location", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithOne("Location")
                        .HasForeignKey("Domain.Entities.Location", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
